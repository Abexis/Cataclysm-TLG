import org.gradle.internal.os.OperatingSystem;

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY')
def buildAsApplication = !buildAsLibrary
if (buildAsApplication) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def keystorePropertiesFilename = 'keystore.properties'
if (localProperties.getProperty('keystorePropertiesFilename') != null) {
    keystorePropertiesFilename = localProperties.getProperty("keystorePropertiesFilename")
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file(keystorePropertiesFilename)
if (keystorePropertiesFile.exists()) {
    keystorePropertiesFile.withReader('UTF-8') { reader ->
        keystoreProperties.load(reader)
    }
}

def njobs = getProperty("j")
if (localProperties.getProperty('j') != null) {
    njobs = localProperties.getProperty("j")
}

// ... [all other property parsing and logging code up to projectRoot, assetsDir, tasks]

preBuild.dependsOn unzipDeps
preBuild.dependsOn makeLocalization
preBuild.dependsOn generateVersionHeader
preBuild.dependsOn createWindowsJunctionLinks
createWindowsJunctionLinks.dependsOn makeLocalization

android {
    namespace "com.cataclysmtlg.cataclysmtlg"
    compileSdkVersion override_compileSdkVersion
    ndkVersion override_ndkVersion

    defaultConfig {
        minSdkVersion override_minSdkVersion
        targetSdkVersion override_targetSdkVersion
        versionCode Integer.valueOf(override_versionCode)
        versionName new File("$version_header_path").text.split('\"')[1]
        if (buildAsApplication) {
            applicationId "com.cataclysmtlg.cataclysmtlg"
            setProperty("archivesBaseName", "cataclysmtlg-" + versionName)
        }
        resValue "string", "app_name", "Cataclysm TLG"
        splits {
            abi {
                enable true
                reset()
                if (abi_arm_32) include "armeabi-v7a"
                if (abi_arm_64) include "arm64-v8a"
                if (abi_x86_32) include "x86"
                if (abi_x86_64) include "x86_64"
                universalApk false
            }
        }
        externalNativeBuild {
            ndkBuild {
                arguments "APP_PLATFORM=$override_ndkBuildAppPlatform", "-j$njobs"
            }
        }
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    flavorDimensions "version"
    productFlavors {
        stable {
            dimension "version"
            resValue "string", "app_name", "Cataclysm TLG"
        }
        experimental {
            dimension "version"
            applicationIdSuffix ".experimental"
            resValue "string", "app_name", "Cataclysm TLG"
        }
    }

    signingConfigs {
        if (keystoreProperties.getProperty('storeFile') != null) {
            def resolvedStoreFile = file(keystoreProperties.getProperty('storeFile'))
            if (!resolvedStoreFile.isAbsolute()) {
                resolvedStoreFile = file("$projectDir/${keystoreProperties.getProperty('storeFile')}")
            }
            if (resolvedStoreFile.exists()) {
                release {
                    storeFile resolvedStoreFile
                    storePassword keystoreProperties.getProperty("storePassword")
                    keyAlias keystoreProperties.getProperty("keyAlias")
                    keyPassword keystoreProperties.getProperty("keyPassword")
                }
            } else {
                throw new GradleException("Keystore file " + resolvedStoreFile + " was not found.\n")
            }
        }
        if (keystoreProperties.getProperty('debug_storeFile') != null) {
            def resolvedDebugFile = file(keystoreProperties.getProperty('debug_storeFile'))
            if (!resolvedDebugFile.isAbsolute()) {
                resolvedDebugFile = file("$projectDir/${keystoreProperties.getProperty('debug_storeFile')}")
            }
            if (resolvedDebugFile.exists()) {
                debug {
                    storeFile resolvedDebugFile
                    storePassword keystoreProperties.getProperty("debug_storePassword")
                    keyAlias keystoreProperties.getProperty("debug_keyAlias")
                    keyPassword keystoreProperties.getProperty("debug_keyPassword")
                }
            } else {
                throw new GradleException("Keystore file " + resolvedDebugFile + " was not found.\n")
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (signingConfigs.hasProperty("release")) {
                signingConfig signingConfigs.release
            }
            externalNativeBuild {
                ndkBuild {
                    cFlags "-DNDEBUG", "-DRELEASE", "-Os", "-g"
                }
            }
            ndk {
                debugSymbolLevel 'SYMBOL_TABLE'
            }
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (signingConfigs.hasProperty("debug")) {
                signingConfig signingConfigs.debug
            }
            externalNativeBuild {
                ndkBuild {
                    cFlags "-g"
                }
            }
            ndk {
                debugSymbolLevel 'FULL'
            }
        }
    }

    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        externalNativeBuild {
            ndkBuild {
                path 'jni/Android.mk'
            }
        }
    }

    lintOptions {
        abortOnError false
    }

    if (OperatingSystem.current() == OperatingSystem.WINDOWS) {
        sourceSets.main.assets.srcDirs = ['src/main/assetsWinHost']
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "$applicationId.aar"
                    output.outputFile = new File(outputFile.parent, fileName)
                }
            }
        }
    }

    // other configurations...
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/res']
        }
    }
    stable {}
    experimental {
        resources {
            srcDirs = ['src/experimental/res']
        }
    }
}

dependencies {
    api fileTree(include: ['*.jar'], dir: 'libs')
}
